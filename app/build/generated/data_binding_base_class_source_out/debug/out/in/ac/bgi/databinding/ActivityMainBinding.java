// Generated by view binder compiler. Do not edit!
package in.ac.bgi.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import in.ac.bgi.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button BdcButton;

  @NonNull
  public final Button BihmButton;

  @NonNull
  public final Button BipButton;

  @NonNull
  public final Button BitBUtton;

  @NonNull
  public final Button BpmcButton;

  @NonNull
  public final Button ItiButtom;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button BdcButton,
      @NonNull Button BihmButton, @NonNull Button BipButton, @NonNull Button BitBUtton,
      @NonNull Button BpmcButton, @NonNull Button ItiButtom) {
    this.rootView = rootView;
    this.BdcButton = BdcButton;
    this.BihmButton = BihmButton;
    this.BipButton = BipButton;
    this.BitBUtton = BitBUtton;
    this.BpmcButton = BpmcButton;
    this.ItiButtom = ItiButtom;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.BdcButton;
      Button BdcButton = ViewBindings.findChildViewById(rootView, id);
      if (BdcButton == null) {
        break missingId;
      }

      id = R.id.BihmButton;
      Button BihmButton = ViewBindings.findChildViewById(rootView, id);
      if (BihmButton == null) {
        break missingId;
      }

      id = R.id.BipButton;
      Button BipButton = ViewBindings.findChildViewById(rootView, id);
      if (BipButton == null) {
        break missingId;
      }

      id = R.id.BitBUtton;
      Button BitBUtton = ViewBindings.findChildViewById(rootView, id);
      if (BitBUtton == null) {
        break missingId;
      }

      id = R.id.BpmcButton;
      Button BpmcButton = ViewBindings.findChildViewById(rootView, id);
      if (BpmcButton == null) {
        break missingId;
      }

      id = R.id.ItiButtom;
      Button ItiButtom = ViewBindings.findChildViewById(rootView, id);
      if (ItiButtom == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, BdcButton, BihmButton, BipButton,
          BitBUtton, BpmcButton, ItiButtom);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
