// Generated by view binder compiler. Do not edit!
package in.ac.bgi.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import in.ac.bgi.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBitBranchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button BitAIMLButton;

  @NonNull
  public final Button BitCEButton;

  @NonNull
  public final Button BitCSButton;

  @NonNull
  public final Button BitDSButton;

  @NonNull
  public final Button BitECEButton;

  @NonNull
  public final Button BitITButton;

  @NonNull
  public final Button BitMEButton;

  private ActivityBitBranchBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button BitAIMLButton, @NonNull Button BitCEButton, @NonNull Button BitCSButton,
      @NonNull Button BitDSButton, @NonNull Button BitECEButton, @NonNull Button BitITButton,
      @NonNull Button BitMEButton) {
    this.rootView = rootView;
    this.BitAIMLButton = BitAIMLButton;
    this.BitCEButton = BitCEButton;
    this.BitCSButton = BitCSButton;
    this.BitDSButton = BitDSButton;
    this.BitECEButton = BitECEButton;
    this.BitITButton = BitITButton;
    this.BitMEButton = BitMEButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBitBranchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBitBranchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_bit_branch, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBitBranchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.BitAIMLButton;
      Button BitAIMLButton = ViewBindings.findChildViewById(rootView, id);
      if (BitAIMLButton == null) {
        break missingId;
      }

      id = R.id.BitCEButton;
      Button BitCEButton = ViewBindings.findChildViewById(rootView, id);
      if (BitCEButton == null) {
        break missingId;
      }

      id = R.id.BitCSButton;
      Button BitCSButton = ViewBindings.findChildViewById(rootView, id);
      if (BitCSButton == null) {
        break missingId;
      }

      id = R.id.BitDSButton;
      Button BitDSButton = ViewBindings.findChildViewById(rootView, id);
      if (BitDSButton == null) {
        break missingId;
      }

      id = R.id.BitECEButton;
      Button BitECEButton = ViewBindings.findChildViewById(rootView, id);
      if (BitECEButton == null) {
        break missingId;
      }

      id = R.id.BitITButton;
      Button BitITButton = ViewBindings.findChildViewById(rootView, id);
      if (BitITButton == null) {
        break missingId;
      }

      id = R.id.BitMEButton;
      Button BitMEButton = ViewBindings.findChildViewById(rootView, id);
      if (BitMEButton == null) {
        break missingId;
      }

      return new ActivityBitBranchBinding((ConstraintLayout) rootView, BitAIMLButton, BitCEButton,
          BitCSButton, BitDSButton, BitECEButton, BitITButton, BitMEButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
